{"version":3,"sources":["App.js","index.js"],"names":["App","useState","notes","setNotes","noteEditing","setNoteEditing","className","id","onSubmit","e","preventDefault","setNote","Math","random","toString","substr","title","target","note","value","body","des","type","name","placeholder","maxLength","map","event","idToEdit","updatedNotes","submitEdits","defaultValue","onClick","idToDelete","filteredNotes","filter","deleteNote","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA0FeA,EAvFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEsBF,mBAAS,IAF/B,mBAETG,EAFS,KAEIC,EAFJ,KAsChB,OACE,qCACA,sBAAKC,UAAU,MAAMC,GAAG,MAAxB,UACE,uBAAMC,SArCM,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAU,CACdJ,GAAIK,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GACzCC,MAAOP,EAAEQ,OAAOC,KAAKC,MACrBC,KAAMX,EAAEQ,OAAOI,IAAIF,OAErBhB,EAAS,GAAD,mBAAKD,GAAL,CAAYS,KACpBF,EAAEQ,OAAOC,KAAKC,MAAQ,GACtBV,EAAEQ,OAAOI,IAAIF,MAAQ,IA4BnB,UACE,uBAAOZ,GAAG,QAAQe,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBACtD,uBACA,uBACA,0BAAUjB,GAAG,OAAOe,KAAK,OAAOC,KAAK,MAAMC,YAAY,2BAA2BC,UAAU,QAC5F,uBACA,uBACA,uBAAOH,KAAK,cAGbpB,EAAMwB,KAAI,SAACR,GAAD,OACT,8BACE,+BACCA,EAAKX,KAAOH,EACX,gCACGc,EAAKF,MADR,IACe,yBADf,IACyBE,EAAKE,QAG9B,uBAAMZ,SAAU,SAACC,GAAD,OAtCN,SAACkB,EAAOC,GAC1BD,EAAMjB,iBACN,IAAMmB,EAAe3B,EAAMwB,KAAI,SAACR,GAC9B,OAAIA,EAAKX,KAAOqB,EACP,CACLrB,GAAIW,EAAKX,GACTS,MAAOW,EAAMV,OAAOC,KAAKC,MACzBC,KAAMO,EAAMV,OAAOI,IAAIF,OAGlBD,KAGXf,EAAS0B,GACTxB,EAAe,IAwBgByB,CAAYrB,EAAGS,EAAKX,KAA3C,UACE,uBACEA,GAAG,QACHe,KAAK,OACLC,KAAK,OACLQ,aAAcb,EAAKF,QAErB,0BACET,GAAG,OACHe,KAAK,OACLC,KAAK,MACLC,YAAY,cAEd,wBAAQF,KAAK,SAAb,8BAGJ,wBAAQU,QAAS,kBA3DN,SAACC,GAClB,IAAMC,EAAgBhC,EAAMiC,QAAO,SAACjB,GAAD,OAAUA,EAAKX,KAAO0B,KACzD9B,EAAS+B,GAyDoBE,CAAWlB,EAAKX,KAAvC,oBACA,wBAAQyB,QAAS,kBAAM3B,EAAea,EAAKX,KAA3C,sBAxBQW,EAAKX,UA6BnB,sBAAKA,GAAG,MAAR,cAAe,sFC9EnB8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.70ac1c8a.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [noteEditing, setNoteEditing] = useState(\"\");\n\n  const addNote = (e) => {\n    e.preventDefault();\n    const setNote = {\n      id: Math.random().toString(36).substr(2, 9),\n      title: e.target.note.value,\n      body: e.target.des.value\n    };\n    setNotes([...notes, setNote]);\n    e.target.note.value = \"\";\n    e.target.des.value = \"\";\n  };\n\n  const deleteNote = (idToDelete) => {\n    const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n    setNotes(filteredNotes);\n  };\n\n  const submitEdits = (event, idToEdit) => {\n    event.preventDefault();\n    const updatedNotes = notes.map((note) => {\n      if (note.id === idToEdit) {\n        return {\n          id: note.id,\n          title: event.target.note.value,\n          body: event.target.des.value\n        };\n      } else {\n        return note;\n      }\n    });\n    setNotes(updatedNotes);\n    setNoteEditing(\"\");\n  };\n\n  return (\n    <>\n    <div className=\"App\" id=\"box\">\n      <form onSubmit={addNote}>\n        <input id=\"title\" type=\"text\" name=\"note\" placeholder=\"Give a Title...\" />\n        <br />\n        <br />\n        <textarea id=\"body\" type=\"text\" name=\"des\" placeholder=\"Provide a description...\" maxLength=\"200\" />\n        <br />\n        <br />\n        <input type=\"Submit\" />\n      </form>\n    \n      {notes.map((note) => (\n        <div key={note.id}>\n          <ol>\n          {note.id !== noteEditing ? (\n            <div>\n              {note.title} <span /> {note.body}\n            </div>\n          ) : (\n            <form onSubmit={(e) => submitEdits(e, note.id)}>\n              <input\n                id=\"title\"\n                type=\"text\"\n                name=\"note\"\n                defaultValue={note.title}\n              />\n              <textarea\n                id=\"body\"\n                type=\"text\"\n                name=\"des\"\n                placeholder=\"enter des\"\n              />\n              <button type=\"Submit\"> Submit Edits</button>\n            </form>\n          )}\n          <button onClick={() => deleteNote(note.id)}>delete</button>\n          <button onClick={() => setNoteEditing(note.id)}>edit</button>\n          </ol>\n        </div>\n      ))}\n    </div>\n    <div id=\"msg\"> <h3>This site can be viewed in mobile view only. </h3></div>\n    </>\n  );\n};\n \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}